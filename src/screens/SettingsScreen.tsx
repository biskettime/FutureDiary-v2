import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  Alert,
} from 'react-native';
import {generateSampleData, deleteSampleData} from '../utils/storage';

interface SettingItem {
  id: string;
  title: string;
  subtitle?: string;
  icon: string;
  onPress: () => void;
  showArrow?: boolean;
}

const SettingsScreen: React.FC = () => {
  const handleAccountLogin = () => {
    Alert.alert('Í≥ÑÏ†ï Î°úÍ∑∏Ïù∏', 'Í≥ÑÏ†ï Î°úÍ∑∏Ïù∏ Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.');
  };

  const handleSync = () => {
    Alert.alert('ÎèôÍ∏∞Ìôî', 'ÎèôÍ∏∞Ìôî Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.');
  };

  const handleTheme = () => {
    Alert.alert('Îã§Ïù¥Ïñ¥Î¶¨ ÌÖåÎßà', 'ÌÖåÎßà ÏÑ§Ï†ï Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.');
  };

  const handleSecretStore = () => {
    Alert.alert('ÎπÑÎ∞Ä ÏùºÍ∏∞ Ïä§ÌÜ†Ïñ¥', 'ÎπÑÎ∞Ä ÏùºÍ∏∞ Ïä§ÌÜ†Ïñ¥ Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.');
  };

  const handleDeleteSampleData = () => {
    Alert.alert(
      'ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú',
      'Î™®Îì† ÏÉòÌîå ÏùºÍ∏∞ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎê©ÎãàÎã§. Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.',
      [
        {
          text: 'Ï∑®ÏÜå',
          style: 'cancel',
        },
        {
          text: 'ÏÇ≠Ï†ú',
          style: 'destructive',
          onPress: async () => {
            try {
              await deleteSampleData();
              Alert.alert('ÏôÑÎ£å', 'ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
            } catch (error) {
              Alert.alert('Ïò§Î•ò', 'ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            }
          },
        },
      ],
    );
  };

  const handleGenerateSampleData = () => {
    Alert.alert(
      'ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±',
      'ÏùºÍ∏∞ ÏÇ¨Ïö©Î≤ïÏùÑ ÏùµÌûê Ïàò ÏûàÎäî ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§. Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Ï∂îÍ∞ÄÎêòÏßÄ ÏïäÏäµÎãàÎã§.',
      [
        {
          text: 'Ï∑®ÏÜå',
          style: 'cancel',
        },
        {
          text: 'ÏÉùÏÑ±',
          onPress: async () => {
            try {
              await generateSampleData();
              Alert.alert('ÏôÑÎ£å', 'ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.');
            } catch (error) {
              Alert.alert('Ïò§Î•ò', 'ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            }
          },
        },
      ],
    );
  };

  const settingSections = [
    {
      title: 'Í≥ÑÏ†ï',
      items: [
        {
          id: 'login',
          title: 'Í≥ÑÏ†ï Î°úÍ∑∏Ïù∏',
          subtitle: 'Íµ¨Í∏Ä, Ïï†Ìîå, Ïù¥Î©îÏùºÎ°ú Î°úÍ∑∏Ïù∏',
          icon: 'üë§',
          onPress: handleAccountLogin,
          showArrow: true,
        },
        {
          id: 'sync',
          title: 'ÎèôÍ∏∞Ìôî',
          subtitle: 'ÌÅ¥ÎùºÏö∞ÎìúÏôÄ Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî',
          icon: 'üîÑ',
          onPress: handleSync,
          showArrow: true,
        },
      ],
    },
    {
      title: 'Í∞úÏù∏Ìôî',
      items: [
        {
          id: 'theme',
          title: 'Îã§Ïù¥Ïñ¥Î¶¨ ÌÖåÎßà',
          subtitle: 'ÏÉâÏÉÅ, Ìè∞Ìä∏, Î†àÏù¥ÏïÑÏõÉ ÏÑ§Ï†ï',
          icon: 'üé®',
          onPress: handleTheme,
          showArrow: true,
        },
      ],
    },
    {
      title: 'Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨',
      items: [
        {
          id: 'delete-sample',
          title: 'ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú',
          subtitle: 'Î™®Îì† ÏÉòÌîå ÏùºÍ∏∞ Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌï©ÎãàÎã§',
          icon: 'üóëÔ∏è',
          onPress: handleDeleteSampleData,
          showArrow: false,
        },
        {
          id: 'generate-sample',
          title: 'ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±',
          subtitle: 'ÏùºÍ∏∞ ÏÇ¨Ïö©Î≤ïÏùÑ ÏùµÌûê Ïàò ÏûàÎäî ÏòàÏãú Îç∞Ïù¥ÌÑ∞',
          icon: 'üìù',
          onPress: handleGenerateSampleData,
          showArrow: false,
        },
      ],
    },
    {
      title: 'ÌîÑÎ¶¨ÎØ∏ÏóÑ',
      items: [
        {
          id: 'secret-store',
          title: 'ÎπÑÎ∞Ä ÏùºÍ∏∞ Ïä§ÌÜ†Ïñ¥',
          subtitle: 'ÌîÑÎ¶¨ÎØ∏ÏóÑ Í∏∞Îä• Î∞è Î≥¥Ïïà Í∞ïÌôî',
          icon: 'üîí',
          onPress: handleSecretStore,
          showArrow: true,
        },
      ],
    },
  ];

  const renderSettingItem = (item: SettingItem) => (
    <TouchableOpacity
      key={item.id}
      style={styles.settingItem}
      onPress={item.onPress}
      activeOpacity={0.7}>
      <View style={styles.settingItemLeft}>
        <View style={styles.iconContainer}>
          <Text style={styles.iconText}>{item.icon}</Text>
        </View>
        <View style={styles.textContainer}>
          <Text style={styles.settingTitle}>{item.title}</Text>
          {item.subtitle && (
            <Text style={styles.settingSubtitle}>{item.subtitle}</Text>
          )}
        </View>
      </View>
      {item.showArrow && <Text style={styles.arrowText}>‚Ä∫</Text>}
    </TouchableOpacity>
  );

  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>ÏÑ§Ï†ï</Text>
        <Text style={styles.headerSubtitle}>Ïï± ÏÑ§Ï†ï Î∞è Í∞úÏù∏Ìôî</Text>
      </View>

      {settingSections.map((section, index) => (
        <View key={index} style={styles.section}>
          <Text style={styles.sectionTitle}>{section.title}</Text>
          <View style={styles.sectionContent}>
            {section.items.map(renderSettingItem)}
          </View>
        </View>
      ))}

      <View style={styles.footer}>
        <Text style={styles.footerText}>ÎØ∏Îûò ÏùºÍ∏∞ v1.0.0</Text>
        <Text style={styles.footerSubtext}>
          Îçî ÎÇòÏùÄ ÏùºÍ∏∞ Í≤ΩÌóòÏùÑ ÏúÑÌï¥ Í≥ÑÏÜç ÏóÖÎç∞Ïù¥Ìä∏Îê©ÎãàÎã§.
        </Text>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  header: {
    paddingHorizontal: 20,
    paddingTop: 60,
    paddingBottom: 30,
    backgroundColor: '#FFFFFF',
  },
  headerTitle: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#1A1A1A',
    marginBottom: 4,
  },
  headerSubtitle: {
    fontSize: 16,
    color: '#8E8E93',
  },
  section: {
    marginTop: 32,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1A1A1A',
    marginBottom: 12,
    marginHorizontal: 20,
  },
  sectionContent: {
    backgroundColor: '#FFFFFF',
    marginHorizontal: 20,
    borderRadius: 12,
    overflow: 'hidden',
  },
  settingItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#F1F1F1',
  },
  settingItemLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  iconContainer: {
    width: 40,
    height: 40,
    borderRadius: 8,
    backgroundColor: '#F0F1FF',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  iconText: {
    fontSize: 20,
  },
  textContainer: {
    flex: 1,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: '#1A1A1A',
    marginBottom: 2,
  },
  settingSubtitle: {
    fontSize: 14,
    color: '#8E8E93',
  },
  arrowText: {
    fontSize: 18,
    color: '#C7C7CC',
  },
  footer: {
    paddingHorizontal: 20,
    paddingVertical: 40,
    alignItems: 'center',
  },
  footerText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#8E8E93',
    marginBottom: 4,
  },
  footerSubtext: {
    fontSize: 12,
    color: '#C7C7CC',
    textAlign: 'center',
  },
});

export default SettingsScreen;
